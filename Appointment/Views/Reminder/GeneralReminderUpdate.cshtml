@model Appointment.ViewModel.Models.GeneralRemindersViewModel

@{
    ViewBag.Title = "GeneralReminderUpdate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div>
    <h2>General Reminder Edit</h2>

    @using (Html.BeginForm("GeneralReminderUpdate", "Reminder", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="row">
        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-4">
            @Html.Label("Start Date", htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Id = "StartDate", @class = "form-control", value = "{0:dd/MM/yyyy}" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-4">
            @Html.Label("End Date", htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @Id = "EndDate", @class = "form-control", value = "{0:dd/MM/yyyy}" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        @*<div class="form-group col-md-4">
            @Html.Label("Breif Description", htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.BreifDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BreifDescription, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group col-md-4">
            @Html.LabelFor(model => model.Time, htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.Time, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Time, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group col-md-4">
            @Html.Label("Groups", htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.ListBoxFor(m => m.SelectedGroupsID, new SelectList(Model.Groups, "Value", "Text"), new { id = "Group", multiple = "true" })
                @Html.ValidationMessageFor(m => m.SelectedGroupsID, "", new { @class = "text-danger" })
                @*<lable id="lblGroupValidation" style="color:red;font-weight:bold;display:none;"></lable><br /><br />*@
            </div>
        </div>
    </div>

    <div class="row">
        <div class="form-group required col-md-12">
            @Html.LabelFor(model => model.BreifDescription, htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.TextAreaFor(model => model.BreifDescription, 3, 10, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BreifDescription, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="form-group col-md-4">
            @Html.Label("Active", htmlAttributes: new { @class = "control-label " })
            <div class="">
                @Html.EditorFor(model => model.IsActive)
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="text-center m-5">
        <div class="">
            <input type="submit" value="Edit" class="btn btn-primary" @*onclick="return Validate();"*@ />
            <input type="button" value="Back" class="btn btn-primary" onclick="location.href='@Url.Action("Index", "Reminder")'" />
        </div>
    </div>
</div>
    }
</div>
@*<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.common.min.css" rel="stylesheet" type="text/css" />
<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.default.min.css" rel="stylesheet" type="text/css" />
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/jquery.min.js"></script>
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/kendo.all.min.js"></script>

<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<link href="~/Scripts/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-multiselect.js"></script>*@

<script>
    function Validate() {
        debugger;
        var validateMessage = 'you have to select at least one group !';
        var validateLabel = $('#lblGroupValidation');
        var SelectedGroups = $('#Group').val();
        if (SelectedGroups == null) {
            //alert('please select group !');
            validateLabel.html(validateMessage);
            validateLabel.show();
            return false;
        } else {
            validateLabel.hide();
            return true;
        }
    }


    $(document).ready(function () {
        $('#Group').multiselect({
            includeSelectAllOption: true,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            maxHeight: 200
        });
        function startChange() {
            var startDate = start.value(),
                endDate = end.value();

            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate());
                end.min(startDate);
            } else if (endDate) {
                start.max(new Date(endDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }

        function endChange() {
            var endDate = end.value(),
                startDate = start.value();

            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate());
                start.max(endDate);
            } else if (startDate) {
                end.min(new Date(startDate));
            } else {
                endDate = new Date();
                start.max(endDate);
                end.min(endDate);
            }
        }
        var today = new Date();
        $("#StartDate").kendoDatePicker({
            format: "dd/MM/yyyy",
            min: today,
        });

        $("#EndDate").kendoDatePicker({
            format: "dd/MM/yyyy",
        });

        var start = $("#StartDate").kendoDatePicker({
            change: startChange,
            min: today,
            format: "dd/MM/yyyy",
        }).data("kendoDatePicker");

        var end = $("#EndDate").kendoDatePicker({
            change: endChange,
            format: "dd/MM/yyyy",
        }).data("kendoDatePicker");

        start.max(end.value());
        end.min(start.value());

        $("form").submit(function () {
            debugger;
            $('button[type=button], input[type=button]').prop('disabled', true);
            $('button[type=submit], input[type=submit]').prop('disabled', true);
            $("form").each(function () { $.data($(this)[0], 'validator', false); });
            var fom = $("form");
            $.validator.unobtrusive.parse(fom);
            if ($("form").valid()) {
                //fillFieldsForSubmit();
            }
            else {
                $("form").valid();
                $("form").each(function () { $.data($(this)[0], 'validator', false); });
                $.validator.unobtrusive.parse("form");
                $('button[type=button], input[type=button]').removeAttr('disabled');
                $('button[type=submit], input[type=submit]').removeAttr('disabled');
            }
        });
    });
</script>