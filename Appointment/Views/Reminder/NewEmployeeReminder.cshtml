@model Appointment.ViewModel.Models.EmployeeRemindersViewModel

@{
    ViewBag.Title = "New Employee Reminder";
    Layout = "~/Views/Shared/_Layout.cshtml";


}

<div class="container">


    @using (Html.BeginForm())
    {


        @Html.AntiForgeryToken()

        <div class="form-horizontal">

            <h2>Create Employee Reminder</h2>
            <hr />
            @Html.HiddenFor(model => model.ID, new { htmlAttributes = new { @Id = "ReminderID" } })
            <div class="row">
                <div class="form-group required col-md-4">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group required col-md-4">
                    @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @Id = "Birth", @class = "form-control", @value = "01/01/2000" } })
                        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group required col-md-4">
                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Id = "Start", @class = "form-control", @value = "01/01/2000" } })
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group required col-md-4">
                    @Html.LabelFor(m => m.PositionID, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownListFor(m => m.PositionID, new SelectList(Model.Positions, "Value", "Text"), "Select a position", new { @class = "form-control", @Id = "Position" })
                        @Html.ValidationMessageFor(model => model.PositionID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group required col-md-4">
                    @Html.LabelFor(m => m.EmployeeID, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownListFor(m => m.EmployeeID, new SelectList(Model.Employees, "Value", "Text"), "Select an employee", new { @Id = "employee" })
                        @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group required col-md-4">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label  " })
                    <div class="">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Id = "Email", @ReadOnly = "ReadOnly" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        <label id="EmailError" style="display:none;color:red;">This Email is already used !</label>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="form-group required col-md-4">
                    @Html.Label("Groups", htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownListFor(m => m.SelectedGroupsID, new SelectList(Model.Groups, "Value", "Text"), new { id = "Group", multiple = "true" })
                        @Html.ValidationMessageFor(m => m.SelectedGroupsID, "", new { @class = "text-danger" })
                        @*<lable id="lblGroupValidation" style="color:red;font-weight:bold;display:none;"></lable><br /><br />*@
                    </div>
                </div>
            </div>

            @*<div class="form-group">
                    @Html.Label("Active", htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @Html.HiddenFor(model => model.IsActive, new { htmlAttributes = new { value = 1 } })

            <div class="text-center m-5">
                <div class="">
                    <input type="submit" value="Create" class="btn btn-primary" id="btnSubmit" />
                    <input type="button" value="Back" class="btn btn-primary" onclick="location.href='@Url.Action("Index", "Reminder")'" />
                </div>
            </div>
        </div>
    }
</div>


@*<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.common.min.css" rel="stylesheet" type="text/css" />
<link href="https://kendo.cdn.telerik.com/2019.2.619/styles/kendo.default.min.css" rel="stylesheet" type="text/css" />
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/jquery.min.js"></script>
<script src="https://kendo.cdn.telerik.com/2019.2.619/js/kendo.all.min.js"></script>

<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<link href="~/Scripts/bootstrap-multiselect.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-multiselect.js"></script>*@


<script>
    $(document).ready(function () {
             $('#Position').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });

        $('#employee').multiselect({
            includeSelectAllOption: false,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            multiselect: false,
            maxHeight: 200
        });

        $('#Group').multiselect({
            includeSelectAllOption: true,
            enableCaseInsensitiveFiltering: true,
            enableFiltering: true,
            maxHeight: 200

        });


        var presentDate = new Date();
        var varDate = new Date((new Date().getFullYear() - 18), 0, 1);
        $("#Birth").kendoDatePicker({
                format:"dd/MM/yyyy",
                value: new Date(1980, 01, 01),
            max: presentDate,
            min: varDate
        });

        $("#Start").kendoDatePicker({
            format:"dd/MM/yyyy",
            value: presentDate,
            min: presentDate,
        });

        var start = $("#Start").kendoDatePicker({
            format: "dd/MM/yyyy"
        }).data("kendoDatePicker");

        var end = $("#Birth").kendoDatePicker({
            format: "dd/MM/yyyy"
        }).data("kendoDatePicker");

        
        var nowDate = Date.now.toString();

        $('#employee').change(function () {
            $("#EmailError").hide();
            $('#btnSubmit').removeAttr('disabled');
            var EmploeeID = $('#employee').val();

            $.ajax({
                url: '@Url.Action("FetchEmail", "Reminder")/?ID=' + EmploeeID + "&ReminderID=" + @Model.ID ,
                type: "GET",
                cache: false,
                async: false,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                //data: { ID: EmploeeID },
                datatype: "json",
                success: function (response) {
                    $('#Email').val(response.Email);
                    var lblEmailValidation = $("#EmailError");
                    var btnSubmit = $('#btnSubmit');
                    debugger;
                    if (response.CanBeUsed) {
                        lblEmailValidation.hide();
                        btnSubmit.removeAttr('disabled');
                    } else {
                        lblEmailValidation.show();
                        btnSubmit.attr('disabled', 'true');
                    }
                },
                error: function (error) {
                    debugger;
                    alert(error);
                }
            });
        });

        $("form").submit(function () {
            debugger;
                $('button[type=button], input[type=button]').prop('disabled', true);
                $('button[type=submit], input[type=submit]').prop('disabled', true);
               $("form").each(function () { $.data($(this)[0], 'validator', false); });
               var fom = $("form");
                $.validator.unobtrusive.parse(fom);
                if ($("form").valid()) {
                    //fillFieldsForSubmit();
                }
                else {
                    $("form").valid();
                    $("form").each(function () { $.data($(this)[0], 'validator', false); });
                    $.validator.unobtrusive.parse("form");
                    $('button[type=button], input[type=button]').removeAttr('disabled');
                    $('button[type=submit], input[type=submit]').removeAttr('disabled');
                }
            })



















    });


    //saving_record = 0; //set variable to show if form is in submission

    //$(document).ready(function () {
    //    $('#form').on('submit', function (e) {
    //        if (saving_record === 0) { //If not submitted yet, submit form
    //        saving_record = 1; //Set variable to show form is in submission
    //            $.ajax({
    //                success: function (data) {
    //                saving_record = 0; //Reset variable to allow record update
    //                },
    //                error: function (data) {
    //                saving_record = 0; //Reset variable to allow record update in case of error
    //                }
    //            })
    //        }
    //    });

    //    });



    //function Validate() {
    //    debugger;
    //    var validateMessage = 'you have to select at least one group !';
    //    var validateLabel = $('#lblGroupValidation');
    //    var SelectedGroups = $('#Group').val();
    //    if (SelectedGroups == null) {
    //        alert('please select group !');
    //        validateLabel.html(validateMessage);
    //        validateLabel.show();
    //        return false;
    //    } else {
    //        validateLabel.hide();
    //        return true;
    //    }
    //}


    //$(document).ready(function () {
    //    $('#Group').multiselect({
    //        includeSelectAllOption: true,
    //        enableCaseInsensitiveFiltering: true,
    //        enableFiltering: true,
    //        maxHeight: 200
    //    });


        //$("form#form1").one("submit", submitFormFunction);
        //function submitFormFunction(event) {
        //    event.preventDefault();
        //    $("form#form1").submit();
        //}

        //jQuery(function () {
        //debugger;
        //$("form").submit(function () {
        //    // submit more than once return false
        //    $(this).submit(function () {
        //        return false;
        //    });
        //    // submit once return true
        //    return true;


        //    });
        //});





</script>