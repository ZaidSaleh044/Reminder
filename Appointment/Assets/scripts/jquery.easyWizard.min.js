!function (t) { var e = [], i = { init: function (s) { var a = t.extend({ stepClassName: "step", showSteps: !0, culture: "en", stepsText: "{n}. {t}", showButtons: !0, buttonsClass: "", prevButton: "< Back", nextButton: "Next >", debug: !1, submitButton: !0, submitButtonText: "Submit", submitButtonClass: "", before: function (t, e, i) { }, after: function (t, e, i) { }, beforeSubmit: function (e) { e.find("input, textarea").each(function () { if (!this.checkValidity()) return this.focus(), step = t(this).parents("." + thisSettings.stepClassName).attr("data-step"), i.goToStep.call(e, step), !1 }) } }, s); return e[this.index()] = a, this.each(function () { thisSettings = a, $this = t(this), $this.addClass("easyWizardElement"), $steps = $this.find("." + thisSettings.stepClassName), thisSettings.steps = $steps.length, thisSettings.width = t(this).width(), thisSettings.steps > 1 ? ($this.wrapInner('<div class="easyWizardWrapper" />'), $this.find(".easyWizardWrapper").width(thisSettings.width * thisSettings.steps), $this.css({ position: "relative", overflow: "hidden" }).addClass("easyPager"), $stepsHtml = t('<ul class="easyWizardSteps">'), $steps.each(function (e) { step = e + 1, "en" == thisSettings.culture ? t(this).css({ float: "left", width: thisSettings.width, display: "none" }).attr("data-step", step) : "ar" == thisSettings.culture && t(this).css({ float: "right", width: thisSettings.width, display: "none" }).attr("data-step", step), e ? t(this).find("input, textarea, select, button").attr("tabindex", "-1") : t(this).addClass("active").css("display", "block"), stepText = thisSettings.stepsText.replace("{n}", "<span>" + step + "</span>"), stepText = stepText.replace("{t}", t(this).attr("data-step-title")), $stepsHtml.append("<li" + (e ? "" : ' class="current"') + ' data-step="' + step + '">' + stepText + "</li>") }), thisSettings.showSteps && $this.prepend($stepsHtml), thisSettings.showButtons && (paginationHtml = '<div class="easyWizardButtons">', paginationHtml += '<button class="prev ' + thisSettings.buttonsClass + '">' + thisSettings.prevButton + "</button>", paginationHtml += '<button class="next ' + thisSettings.buttonsClass + '">' + thisSettings.nextButton + "</button>", paginationHtml += thisSettings.submitButton ? '<button type="submit" class="submit ' + thisSettings.submitButtonClass + '">' + thisSettings.submitButtonText + "</button>" : "", paginationHtml += "</div>", $paginationBloc = t(paginationHtml), $paginationBloc.css("clear", "both"), $paginationBloc.find(".prev, .submit").hide(), $paginationBloc.find(".prev").bind("click.easyWizard", function (e) { e.preventDefault(), $wizard = t(this).parents(".easyWizardElement"), i.prevStep.apply($wizard) }), $paginationBloc.find(".next").bind("click.easyWizard", function (e) { e.preventDefault(), $wizard = t(this).parents(".easyWizardElement"), i.nextStep.apply($wizard) }), $this.append($paginationBloc)), $formObj = $this.is("form") ? $this : t(this).find("form"), $this.find('[type="submit"]').bind("click.easyWizard", function (e) { return $wizard = t(this).parents(".easyWizardElement"), !1 !== thisSettings.beforeSubmit($wizard) })) : thisSettings.debug && console.log("Can't make a wizard with only one step oO") }) }, prevStep: function () { thisSettings = e[this.index()], $activeStep = this.find("." + thisSettings.stepClassName + ".active"), $activeStep.prev("." + thisSettings.stepClassName).length && (prevStep = parseInt($activeStep.prev().attr("data-step")), i.goToStep.call(this, prevStep)) }, nextStep: function () { thisSettings = e[this.index()], $activeStep = this.find("." + thisSettings.stepClassName + ".active"), $activeStep.next("." + thisSettings.stepClassName).length && (nextStep = parseInt($activeStep.next().attr("data-step")), i.goToStep.call(this, nextStep)) }, goToStep: function (t) { if (thisSettings = e[this.index()], $activeStep = this.find("." + thisSettings.stepClassName + ".active"), $nextStep = this.find("." + thisSettings.stepClassName + '[data-step="' + t + '"]'), (i = $activeStep.attr("data-step")) != t) { if (!1 === thisSettings.before(this, $activeStep, $nextStep)) return !1; leftValue = i < t ? -1 * thisSettings.width : thisSettings.width, $activeStep.removeClass("active"), $activeStep.find("input, textarea, select, button").attr("tabindex", "-1"), $nextStep.css("display", "block").addClass("active"), $nextStep.find("input, textarea, select, button").removeAttr("tabindex"); var i = $activeStep.attr("data-step"); $nextStep.attr("data-step") > i ? $activeStep.stop(!0, !0).animate({ opacity: "0" }, 600, function () { $activeStep.css({ display: "none" }), $nextStep.css({ display: "block", opacity: "1" }) }) : ($activeStep.stop(!0, !0).animate({ opacity: "0" }, 600, function () { $activeStep.css({ display: "none" }) }), $nextStep.stop(!0, !0).animate({ opacity: "1" }, 600, function () { $nextStep.css({ display: "block", opacity: "1" }) })), this.find(".easyWizardSteps .current").removeClass("current"), this.find('.easyWizardSteps li[data-step="' + t + '"]').addClass("current"), $paginationBloc = this.find(".easyWizardButtons"), $paginationBloc.length && (1 == t ? ($paginationBloc.find(".prev, .submit").hide(), $paginationBloc.find(".next").show()) : t < thisSettings.steps ? ($paginationBloc.find(".submit").hide(), $paginationBloc.find(".prev, .next").show()) : ($nextStep.prev("." + thisSettings.stepClassName).length && $paginationBloc.find(".prev").show(), $paginationBloc.find(".next").hide(), $paginationBloc.find(".submit").show())), thisSettings.after(this, $activeStep, $nextStep) } }, resize: function (e) { thisSettings.width = $this.width(), $this.find(".easyWizardWrapper").width(thisSettings.width * thisSettings.steps), $steps.each(function (e) { t(this).css({ width: thisSettings.width }) }), activeStep = e.attr("data-step"), $this.find(".easyWizardWrapper").css({}), e.addClass("active").css("opacity", "1").css("display", "block") } }; t.fn.easyWizard = function (e) { return i[e] ? i[e].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof e && e ? void t.error("Method " + e + " does not exist on jQuery.easyWizard") : i.init.apply(this, arguments) } }(jQuery);